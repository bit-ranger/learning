/*
 *        DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
 *                    Version 2, December 2004
 *
 * Copyright (C) 2004 Sam Hocevar <sam@hocevar.net>
 *
 * Everyone is permitted to copy and distribute verbatim or modified
 * copies of this license document, and changing it is allowed as long
 * as the name is changed.
 *
 *            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
 *   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
 *
 *  0. You just DO WHAT THE FUCK YOU WANT TO.
 */

/*
 * Clock.java
 *
 * Created on 2011-11-2, 13:06:25
 */
package com.rainyalley.practice.toy;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import java.util.*;

/**
 *
 * @author Azige
 */
public class Clock extends javax.swing.JFrame{

    /**
     * Creates new form Clock
     */
    public Clock(){
        initComponents();
        Calendar time = new GregorianCalendar();
        timeLable.setText(String.format("%2d:%02d:%02d", time.get(Calendar.HOUR_OF_DAY), time.get(Calendar.MINUTE), time.get(Calendar.SECOND)));
        new javax.swing.Timer(1000, new ActionListener(){
            public void actionPerformed(ActionEvent e){
                timePanel.repaint();
                Calendar time = new GregorianCalendar();
                timeLable.setText(String.format("%2d:%02d:%02d", time.get(Calendar.HOUR_OF_DAY), time.get(Calendar.MINUTE), time.get(Calendar.SECOND)));
            }
        }).start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        timePanel = new ClockPanel();
        timeLable = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        timePanel.setPreferredSize(new java.awt.Dimension(350, 350));

        javax.swing.GroupLayout timePanelLayout = new javax.swing.GroupLayout(timePanel);
        timePanel.setLayout(timePanelLayout);
        timePanelLayout.setHorizontalGroup(
                timePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 350, Short.MAX_VALUE)
        );
        timePanelLayout.setVerticalGroup(
                timePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 350, Short.MAX_VALUE)
        );

        timeLable.setFont(new java.awt.Font("微软雅黑", 0, 24)); // NOI18N
        timeLable.setText("12:00:00");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(timePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(121, 121, 121)
                                .addComponent(timeLable, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(timePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(timeLable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]){
        java.awt.EventQueue.invokeLater(new Runnable(){
            public void run(){
                new Clock().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel timeLable;
    private javax.swing.JPanel timePanel;
    // End of variables declaration                   

}

class ClockPanel extends JPanel{

    @Override
    protected void paintComponent(Graphics g){
        super.paintComponent(g);
        g.drawOval(25, 25, 300, 300);
        for (int i = 0; i < 60; i++){
            g.drawLine((int)(175 + 145 * Math.sin(i / 60.0 * 2 * Math.PI)), (int)(175 - 145 * Math.cos(i / 60.0 * 2 * Math.PI)),
                    (int)(175 + 150 * Math.sin(i / 60.0 * 2 * Math.PI)), (int)(175 - 150 * Math.cos(i / 60.0 * 2 * Math.PI)));
        }
        GregorianCalendar time = new GregorianCalendar();

        g.setColor(Color.RED);
        double second = time.get(Calendar.SECOND);
        g.drawLine(175, 175, (int)(175 + 140 * Math.sin(second / 60 * 2 * Math.PI)), (int)(175 - 140 * Math.cos(second / 60 * 2 * Math.PI)));
        g.setColor(Color.BLUE);
        double minute = time.get(Calendar.MINUTE);
        g.drawLine(175, 175, (int)(175 + 100 * Math.sin(minute / 60 * 2 * Math.PI)), (int)(175 - 100 * Math.cos(minute / 60 * 2 * Math.PI)));
        g.setColor(Color.BLACK);
        double hour = time.get(Calendar.HOUR_OF_DAY);
        g.drawLine(175, 175, (int)(175 + 60 * Math.sin((hour + minute / 60) / 12 * 2 * Math.PI)), (int)(175 - 60 * Math.cos((hour + minute / 60) / 12 * 2 * Math.PI)));
    }

}